{
  "hash": "dc0415d1edb34415ad57990e230d7792",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MC2 Kickstarter\"\nformat: html\ntoc: true\ntoc-depth: 4\ndate: \"May 12, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n\n## Overview\n\nBy the end of this hands-on exercise, you will be able to:\n\n-   import Mini Case 2 data file R object,\n-   split the knowledge graph into nodes and edges tibble data frames,\n-   tidy nodes and edges tibble data frames for conforming to the requirements of tidygraph,\n-   create a tidygrpah object by using the tidied nides and edges, and\n-   visualise the tidygraph\n\n## Getting Started\n\nFor the purpose of this exercise, five R packages will be used. They are tidyverse, jsonlite, tidygraph, ggraph and SmartEDA.\n\n::: callout-note\nYou are required to install the R packages above, if necessary, before continue to the next step.\n:::\n\nIn the code chunk below, `p_load()` of **pacman** package is used to load the R packages into R environemnt.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph,\n               SmartEDA)\n```\n:::\n\n\n\n## Importing Knowledge Graph Data\n\nFor the purpose of this exercise, *FILAH.json* file will be used. Before getting started, you should have the data set in the **data** sub-folder.\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *FILAH.json* file into R and save the output object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilah <- fromJSON(\"data/FILAH.json\")\n```\n:::\n\n\n\n### Inspecting knowledge graph structure\n\nBefore preparing the data, it is always a good practice to examine the structure of *filah* knowledge graph.\n\nIn the code chunk below `glimpse()` is used to reveal the structure of *filah* knowledge graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(filah)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi TRUE\n $ graph     : Named list()\n $ nodes     :'data.frame':\t396 obs. of  17 variables:\n  ..$ type       : chr [1:396] \"meeting\" \"meeting\" \"meeting\" \"meeting\" ...\n  ..$ date       : chr [1:396] \"Meeting 1\" \"Meeting 2\" \"Meeting 3\" \"Meeting 4\" ...\n  ..$ label      : chr [1:396] \"Meeting 1\" \"Meeting 2\" \"Meeting 3\" \"Meeting 4\" ...\n  ..$ id         : chr [1:396] \"Meeting_1\" \"Meeting_2\" \"Meeting_3\" \"Meeting_4\" ...\n  ..$ name       : chr [1:396] NA NA NA NA ...\n  ..$ role       : chr [1:396] NA NA NA NA ...\n  ..$ short_topic: chr [1:396] NA NA NA NA ...\n  ..$ long_topic : chr [1:396] NA NA NA NA ...\n  ..$ short_title: chr [1:396] NA NA NA NA ...\n  ..$ long_title : chr [1:396] NA NA NA NA ...\n  ..$ plan_type  : chr [1:396] NA NA NA NA ...\n  ..$ lat        : num [1:396] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ lon        : num [1:396] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ zone       : chr [1:396] NA NA NA NA ...\n  ..$ zone_detail: chr [1:396] NA NA NA NA ...\n  ..$ start      : chr [1:396] NA NA NA NA ...\n  ..$ end        : chr [1:396] NA NA NA NA ...\n $ links     :'data.frame':\t765 obs. of  9 variables:\n  ..$ role     : chr [1:765] \"part_of\" \"part_of\" \"part_of\" \"part_of\" ...\n  ..$ source   : chr [1:765] \"Meeting_1\" \"Meeting_1\" \"Meeting_1\" \"Meeting_1\" ...\n  ..$ target   : chr [1:765] \"fish_vacuum_Meeting_1_Introduction_Discussion\" \"fish_vacuum_Meeting_1_Introduction\" \"seafood_festival_Meeting_1_Discussion\" \"seafood_festival_Meeting_1_Feasibility\" ...\n  ..$ key      : int [1:765] 0 0 0 0 0 0 0 0 0 0 ...\n  ..$ sentiment: num [1:765] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ reason   : chr [1:765] NA NA NA NA ...\n  ..$ industry :List of 765\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. ..$ : NULL\n  .. .. [list output truncated]\n  ..$ status   : chr [1:765] NA NA NA NA ...\n  ..$ time     : chr [1:765] NA NA NA NA ...\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\nNotice that *Industry* field is in list data type. In general, this data type is not acceptable by `tbl_graph()` of **tidygraph**.  In order to avoid error arise when building tidygraph object, it is wiser to exclude this field from the edges data table.  However, it might be still useful in subsequent analysis.\n:::\n\n## Extracting the edges and nodes tables\n\nNext, `as_tibble()` of **tibble** package package is used to extract the nodes and links tibble data frames from *filah* tibble dataframe into two separate tibble dataframes called *filah_nodes* and *filah_edges* respectively.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilah_nodes <- as_tibble(filah$nodes)\nfilah_edges <- as_tibble(filah$links)\n```\n:::\n\n\n\n### Initial EDA\n\nIt is time for us to apply appropriate EDA methods to examine the data.\n\nIn the code chunk below, `ExpCatViz()` of SmartEDA package is used to reveal the frequency distribution of all categorical fields in *filah_nodes* tibble dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExpCatViz(data=filah_nodes,\n          col=\"lightblue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[3]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[4]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[5]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-5-5.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nWhat useful discovery can you obtained from the visualisation above?\n:::\n\nOn the other hands, code chunk below uses `ExpCATViz()` of SmartEDA package to reveal the frequency distribution of all categorical fields in *filah_edges* tibble dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExpCatViz(data=filah_edges,\n          col=\"lightblue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[3]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nWhat useful discovery can you obtained from the visualisation above?\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExpNumViz(filah_nodes)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nWhat useful discovery can you obtained from the visualisation above?\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExpNumViz(filah_edges)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nWhat useful discovery can you obtained from the visualisation above?\n:::\n\n## Data Cleaning and Wrangling\n\n### Cleaning and wrangling nodes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilah_nodes_cleaned <- filah_nodes %>%\n  mutate(id = as.character(id)) %>%\n  filter(!is.na(id)) %>%\n  distinct(id, .keep_all = TRUE) %>%\n  select(id, type, label)   \n```\n:::\n\n\n\n### Cleaning and wrangling edges\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilah_edges_cleaned <- filah_edges %>%\n  rename(from = source, to = target) %>%\n  mutate(across(c(from, to), as.character)) %>%\n  filter(from %in% filah_nodes_cleaned$id, to %in% filah_nodes_cleaned$id)\n\n# Remove problematic columns from edge table for graph building\nfilah_edges_min <- filah_edges_cleaned %>%\n  select(from, to, role)  # Only basic fields needed for graph structure\n```\n:::\n\n\n\n### Building the tidygraph object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfilah_graph <- tbl_graph(\n  nodes = filah_nodes_cleaned, \n  edges = filah_edges_min, \n  directed = TRUE)\n```\n:::\n\n\n\n::: callout-note\nSince the similar steps will be used to clean and wrangle `TROUT.json` and `journalist.json`, you might want to consider converting the above code chunks into R function(s).\n:::\n\n## Visualising the knowledge graph\n\nIn this section, we will use ggraph's functions to visualise and analyse the graph object.\n\n::: callout-warning\nThe example below is not model answers, It is used to show you how to use the mantra of **Overview first, details on demand** of visual investigation.\n:::\n\n### Visualising the whole graph\n\nSeveral of the ggraph layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\nIn the code chunk below, ggraph functions are used to create the whole graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(filah_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`), \n                  size = 4) +\n  geom_node_text(aes(label = type), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](MC2-kickstarter_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "MC2-kickstarter_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}