{
  "hash": "6570f3eb0d53f126c27cf65e6ce5d3d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"MC3 Kickstarter\"\nformat: html\ntoc: true\ntoc-depth: 4\ndate: \"May 12, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n  warning: false\n---\n\n\n\n## Overview\n\nBy the end of this hands-on exercise, you will be able to:\n\n-   import Mini Case 3 data file R object,\n-   split the knowledge graph into nodes and edges tibble data frames,\n-   tidy nodes and edges tibble data frames for conforming to the requirements of tidygraph,\n-   create a tidygrpah object by using the tidied nides and edges, and\n-   visualise the tidygraph\n\n## Getting Started\n\nFor the purpose of this exercise, five R packages will be used. They are tidyverse, jsonlite, tidygraph, ggraph and SmartEDA.\n\n::: callout-note\nYou are required to install the R packages above, if necessary, before continue to the next step.\n:::\n\nIn the code chunk below, `p_load()` of **pacman** package is used to load the R packages into R environemnt.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, jsonlite,\n               tidygraph, ggraph,\n               SmartEDA)\n```\n:::\n\n\n\n## Importing Knowledge Graph Data\n\nFor the purpose of this exercise, *mc3.json* file will be used. Before getting started, you should have the data set in the **data** sub-folder.\n\nIn the code chunk below, `fromJSON()` of **jsonlite** package is used to import *mc3.json* file into R and save the output object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMC3 <- fromJSON(\"data/MC3_graph.json\")\nMC3_schema <- fromJSON(\"data/MC3_schema.json\")\n```\n:::\n\n\n\n### Inspecting knowledge graph structure\n\nBefore preparing the data, it is always a good practice to examine the structure of *mc3* knowledge graph.\n\nIn the code chunk below `glimpse()` is used to reveal the structure of *mc3* knowledge graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(MC3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nList of 5\n $ directed  : logi TRUE\n $ multigraph: logi FALSE\n $ graph     :List of 4\n  ..$ mode        : chr \"static\"\n  ..$ edge_default: Named list()\n  ..$ node_default: Named list()\n  ..$ name        : chr \"VAST_MC3_Knowledge_Graph\"\n $ nodes     :'data.frame':\t1159 obs. of  31 variables:\n  ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  ..$ findings         : chr [1:1159] NA NA NA NA ...\n  ..$ content          : chr [1:1159] NA NA NA NA ...\n  ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  ..$ results          : chr [1:1159] NA NA NA NA ...\n  ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  ..$ destination      : chr [1:1159] NA NA NA NA ...\n  ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  ..$ thing_collected  :'data.frame':\t1159 obs. of  2 variables:\n  .. ..$ type: chr [1:1159] NA NA NA NA ...\n  .. ..$ name: chr [1:1159] NA NA NA NA ...\n  ..$ reference        : chr [1:1159] NA NA NA NA ...\n  ..$ date             : chr [1:1159] NA NA NA NA ...\n  ..$ time             : chr [1:1159] NA NA NA NA ...\n  ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  ..$ operational_role : chr [1:1159] NA NA NA NA ...\n $ edges     :'data.frame':\t3226 obs. of  5 variables:\n  ..$ id         : chr [1:3226] \"2\" \"3\" \"5\" \"3013\" ...\n  ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  ..$ source     : chr [1:3226] \"Sam\" \"Sam\" \"Sam\" \"Sam\" ...\n  ..$ target     : chr [1:3226] \"Relationship_Suspicious_217\" \"Event_Communication_370\" \"Event_Assessment_600\" \"Relationship_Colleagues_430\" ...\n  ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n```\n\n\n:::\n:::\n\n\n\n::: callout-warning\nNotice that *Industry* field is in list data type. In general, this data type is not acceptable by `tbl_graph()` of **tidygraph**. In order to avoid error arise when building tidygraph object, it is wiser to exclude this field from the edges data table. However, it might be still useful in subsequent analysis.\n:::\n\n## Extracting the edges and nodes tables\n\nNext, `as_tibble()` of **tibble** package package is used to extract the nodes and links tibble data frames from *mc3* tibble dataframe into two separate tibble dataframes called *mc3_nodes* and *mc3_edges* respectively.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes <- as_tibble(MC3$nodes)\nmc3_edges <- as_tibble(MC3$edges)\n```\n:::\n\n\n\n### Initial EDA\n\nIt is time for us to apply appropriate EDA methods to examine the data.\n\nIn the code chunk below, `ExpCatViz()` of SmartEDA package is used to reveal the frequency distribution of all categorical fields in *mc3_nodes* tibble dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExpCatViz(data=mc3_nodes,\n          col=\"lightblue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[3]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[4]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-4.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[5]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-5.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[6]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-6.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[7]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-7.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[8]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-8.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[9]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-9.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[10]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-10.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[11]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-11.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[12]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-12.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[13]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-13.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[14]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-5-14.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nWhat useful discovery can you obtained from the visualisation above?\n:::\n\nOn the other hands, code chunk below uses `ExpCATViz()` of SmartEDA package to reveal the frequency distribution of all categorical fields in *mc3_edges* tibble dataframe.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nExpCatViz(data=mc3_edges,\n          col=\"lightblue\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-note\nWhat useful discovery can you obtained from the visualisation above?\n:::\n\n## Data Cleaning and Wrangling\n\n### Cleaning and wrangling nodes\n\nCode chunk below performs the following data cleaning tasks:\n\n- convert values in id field into character data type,\n- exclude records with `id` value are na, \n- exclude records with similar id values, \n- exclude `thing_collected` field, and\n- save the cleaned tibble dataframe into a new tibble datatable called `mc3_nodes_cleaned`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_nodes_cleaned <- mc3_nodes %>%\n  mutate(id = as.character(id)) %>%\n  filter(!is.na(id)) %>%\n  distinct(id, .keep_all = TRUE) %>%\n  select(-thing_collected)\n```\n:::\n\n\n\n### Cleaning and wrangling edges\n\nNext, the code chunk below will be used to:\n\n- rename source and target fields to from_id and to_id respectively,\n- convert values in from_id and to_id fields to character data type,\n- exclude values in from_id and to_id which not found in the id field of mc3_nodes_cleaned,\n- exclude records whereby from_id and/or to_id values are missing, and\n- save the cleaned tibble dataframe and called it mc3_edges_cleaned.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_cleaned <- mc3_edges %>%\n  rename(from_id = source, \n         to_id = target) %>%\n  mutate(across(c(from_id, to_id), \n                as.character)) %>%\n  filter(from_id %in% mc3_nodes_cleaned$id, \n         to_id %in% mc3_nodes_cleaned$id) %>%\n  filter(!is.na(from_id), !is.na(to_id))\n```\n:::\n\n\n\nNext, code chunk below will be used to create mapping of character id in `mc3_nodes_cleaned` to row index\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnode_index_lookup <- mc3_nodes_cleaned %>%\n  mutate(.row_id = row_number()) %>%\n  select(id, .row_id)\n```\n:::\n\n\n\nNext, the code chunk below will be used to join and convert `from_id` and `to_id` to integer indices.  At the same time we also drop rows with unmatched nodes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_indexed <- mc3_edges_cleaned %>%\n  left_join(node_index_lookup, \n            by = c(\"from_id\" = \"id\")) %>%\n  rename(from = .row_id) %>%\n  left_join(node_index_lookup, \n            by = c(\"to_id\" = \"id\")) %>%\n  rename(to = .row_id) %>%\n  select(from, to, is_inferred, type) %>%\n  filter(!is.na(from) & !is.na(to))  \n```\n:::\n\n\n\nNext the code chunk below is used to subset nodes to only those referenced by edges.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nused_node_indices <- sort(\n  unique(c(mc3_edges_indexed$from, \n           mc3_edges_indexed$to)))\n\nmc3_nodes_final <- mc3_nodes_cleaned %>%\n  slice(used_node_indices) %>%\n  mutate(new_index = row_number())\n```\n:::\n\n\n\nWe will then use the code chunk below to rebuild lookup from old index to new index.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold_to_new_index <- tibble(\n  old_index = used_node_indices,\n  new_index = seq_along(\n    used_node_indices))\n```\n:::\n\n\n\nLastly, the code chunk below will be used to update edge indices to match new node table.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_edges_final <- mc3_edges_indexed %>%\n  left_join(old_to_new_index, \n            by = c(\"from\" = \"old_index\")) %>%\n  rename(from_new = new_index) %>%\n  left_join(old_to_new_index, \n            by = c(\"to\" = \"old_index\")) %>%\n  rename(to_new = new_index) %>%\n  select(from = from_new, to = to_new, \n         is_inferred, type)\n```\n:::\n\n\n\n## Building the tidygraph object\n\nNow we are ready to build the tidygraph object by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmc3_graph <- tbl_graph(\n  nodes = mc3_nodes_final,\n  edges = mc3_edges_final,\n  directed = TRUE\n)\n```\n:::\n\n\n\nAfter the tidygraph object is created, it is always a good practice to examine the object by using `str()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(mc3_graph)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nClasses 'tbl_graph', 'igraph'  hidden list of 10\n $ : num 1159\n $ : logi TRUE\n $ : num [1:3226] 0 0 0 0 0 0 0 1 1 1 ...\n $ : num [1:3226] 1137 356 746 894 875 ...\n $ : NULL\n $ : NULL\n $ : NULL\n $ : NULL\n $ :List of 4\n  ..$ : num [1:3] 1 0 1\n  ..$ : Named list()\n  ..$ :List of 31\n  .. ..$ type             : chr [1:1159] \"Entity\" \"Entity\" \"Entity\" \"Entity\" ...\n  .. ..$ label            : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ name             : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ sub_type         : chr [1:1159] \"Person\" \"Person\" \"Person\" \"Person\" ...\n  .. ..$ id               : chr [1:1159] \"Sam\" \"Kelly\" \"Nadia Conti\" \"Elise\" ...\n  .. ..$ timestamp        : chr [1:1159] NA NA NA NA ...\n  .. ..$ monitoring_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ findings         : chr [1:1159] NA NA NA NA ...\n  .. ..$ content          : chr [1:1159] NA NA NA NA ...\n  .. ..$ assessment_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ results          : chr [1:1159] NA NA NA NA ...\n  .. ..$ movement_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ destination      : chr [1:1159] NA NA NA NA ...\n  .. ..$ enforcement_type : chr [1:1159] NA NA NA NA ...\n  .. ..$ outcome          : chr [1:1159] NA NA NA NA ...\n  .. ..$ activity_type    : chr [1:1159] NA NA NA NA ...\n  .. ..$ participants     : int [1:1159] NA NA NA NA NA NA NA NA NA NA ...\n  .. ..$ reference        : chr [1:1159] NA NA NA NA ...\n  .. ..$ date             : chr [1:1159] NA NA NA NA ...\n  .. ..$ time             : chr [1:1159] NA NA NA NA ...\n  .. ..$ friendship_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ permission_type  : chr [1:1159] NA NA NA NA ...\n  .. ..$ start_date       : chr [1:1159] NA NA NA NA ...\n  .. ..$ end_date         : chr [1:1159] NA NA NA NA ...\n  .. ..$ report_type      : chr [1:1159] NA NA NA NA ...\n  .. ..$ submission_date  : chr [1:1159] NA NA NA NA ...\n  .. ..$ jurisdiction_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ authority_level  : chr [1:1159] NA NA NA NA ...\n  .. ..$ coordination_type: chr [1:1159] NA NA NA NA ...\n  .. ..$ operational_role : chr [1:1159] NA NA NA NA ...\n  .. ..$ new_index        : int [1:1159] 1 2 3 4 5 6 7 8 9 10 ...\n  ..$ :List of 2\n  .. ..$ is_inferred: logi [1:3226] TRUE FALSE TRUE TRUE TRUE TRUE ...\n  .. ..$ type       : chr [1:3226] NA \"sent\" NA NA ...\n $ :<environment: 0x000002835e7a4a20> \n - attr(*, \"active\")= chr \"nodes\"\n```\n\n\n:::\n:::\n\n\n\n## Visualising the knowledge graph\n\nSeveral of the **ggraph** layouts involve randomisation. In order to ensure reproducibility, it is necessary to set the seed value before plotting by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n```\n:::\n\n\n\nIn the code chunk below, **ggraph** functions are used to create the whole graph.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggraph(mc3_graph, \n       layout = \"fr\") +\n  geom_edge_link(alpha = 0.3, \n                 colour = \"gray\") +\n  geom_node_point(aes(color = `type`), \n                  size = 4) +\n  geom_node_text(aes(label = type), \n                 repel = TRUE, \n                 size = 2.5) +\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](MC3-kickstarter_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n::: callout-warning\nThe example below is not model answers, It is used to show you how to use the mantra of **Overview first, details on demand** of visual investigation.\n:::\n\n",
    "supporting": [
      "MC3-kickstarter_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}